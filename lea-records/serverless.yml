service: lea-records
frameworkVersion: '3'


custom:
  tableUserName: 'users-table-${sls:stage}'
  tableDiskName: 'disks-table-${sls:stage}'
  tableOrderName: 'orders-table-${sls:stage}'
  dynamodb:
    start:
      migrate: true
      stages:
        - ${sls:stage}

provider:
  name: aws
  runtime: nodejs18.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ UsersTable, Arn ]
            - Fn::GetAtt: [ DisksTable, Arn ]
            - Fn::GetAtt: [ OrdersTable, Arn ]
  environment:
    USERS_TABLE: ${self:custom.tableUserName}
    DISKS_TABLE: ${self:custom.tableDiskName}
    ORDERS_TABLE: ${self:custom.tableOrderName}

functions:
  api:
    handler: index.handler
    events:
      - httpApi: '*'

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableUserName}
    DisksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: diskId
            AttributeType: S
        KeySchema:
          - AttributeName: diskId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableDiskName}
    OrdersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: orderId
            AttributeType: S
        KeySchema:
          - AttributeName: orderId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableOrderName}

plugins:
  - serverless-offline
  - serverless-dynamodb-local
